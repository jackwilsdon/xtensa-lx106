#!/usr/bin/env bash
#
# Build xtensa-lx106-elf container

if [[ "$0" != "${BASH_SOURCE[0]}" ]]; then
  echo "$(basename -- "${BASH_SOURCE[0]}"): error:" \
       'script must not be sourced' >&2
  return 1
fi

readonly SCRIPT_NAME=$(basename -- "${BASH_SOURCE[0]}")
readonly BASE_DIRECTORY=$(cd "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)

source "${BASE_DIRECTORY}/scripts/config.sh"
source "${BASE_DIRECTORY}/scripts/util.sh"

# usage: usage ["printer"]
usage() {
  ${1:-print_raw} "usage: ${SCRIPT_NAME} [-h] [-v] [-n] [-t TAG]"
}

# usage: full_usage ["printer"]
full_usage() {
  local printer=${1:-print_raw}

  usage "${printer}"
  ${printer}
  ${printer} 'Build script for xtensa-lx106-elf development container'
  ${printer}
  ${printer} 'arguments:'
  ${printer} '  -h                    show this help message and exit'
  ${printer} '  -v                    show version information and exit'
  ${printer} '  -n                    don'"'"'t run docker and just print the'
  ${printer} '                        command instead'
  ${printer} '  -t TAG                the tag of the image to build'
  ${printer}
  ${printer} 'environment variables:'
  ${printer} '  NAME                  the name of the image to build'
  ${printer} '  TAG                   the tag of the image to build'
  ${printer} '  SOURCE                the source directory of the image'
  ${printer} '  DOCKER                the location of the docker binary'
  ${printer}
  ${printer} 'environment variables can be overridden by normal arguments'
}

# usage: build_image "name" "tag" "source"
build_image() {

  # Run docker with the provided arguments
  run_docker build -t "$1:$2" "$3"
}

# usage: main [-h] [-v] [-n] [-t TAG]
main() {
  local print_version=0
  local executor=build_image
  local tag=${TAG}
  local source_=${SOURCE}

  while getopts ':hvnt:' OPT; do
    case ${OPT} in
      h) full_usage; return 0 ;;
      v) print_version=1 ;;
      n) executor="mock_run_docker build_image" ;;
      t) tag=${OPTARG} ;;
      ?) error "illegal option: ${OPTARG}"; usage error_raw; return 1 ;;
    esac
  done

  # Print version if needed
  if [[ "${print_version}" = 1 ]]; then
    print_version_info "${NAME}" "${tag}"
    return 0
  fi

  # Make the source path absolute if needed
  if [[ "${SOURCE}" = "${DEFAULT_SOURCE}" ]]; then
    source_="${BASE_DIRECTORY}/${SOURCE}"
  fi

  # Ensure the source path is valid
  if [[ "${source_}" = "${source_#/}" ]]; then
    error 'source path must be absolute'
    return 1
  fi

  # Check if any extra arguments were provided
  if [[ $((OPTIND - 1)) != $# ]]; then
    error 'too many arguments'
    usage error_raw
    return 1
  fi

  # Build the image
  ${executor} "${NAME}" "${tag}" "${source_}"
}

main "$@"
exit $?
