#!/usr/bin/env bash
#
# Build xtensa-lx106-elf container

if [[ "$0" != "${BASH_SOURCE[0]}" ]]; then
  echo "$(basename -- "${BASH_SOURCE[0]}"): error:" \
       'script must not be sourced' >&2
  return 1
fi

readonly SCRIPT_NAME=$(basename -- "${BASH_SOURCE[0]}")
readonly BASE_DIRECTORY=$(cd "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)
readonly CURRENT_DIRECTORY=$(pwd)

source "${BASE_DIRECTORY}/scripts/config.sh"
source "${BASE_DIRECTORY}/scripts/util.sh"

# usage: usage ["printer"]
usage() {
  ${1:-print_raw} "usage: ${SCRIPT_NAME} [-h] [-v] [-n] [-t TAG]"
}

# usage: full_usage ["printer"]
full_usage() {
  local printer=${1:-print_raw}

  usage "${printer}"
  ${printer}
  ${printer} 'Build script for xtensa-lx106-elf development container'
  ${printer}
  ${printer} 'arguments:'
  ${printer} '  -h                    show this help message and exit'
  ${printer} '  -v                    show version information and exit'
  ${printer} '  -n                    don'"'"'t run docker and just print the'
  ${printer} '                        command instead'
  ${printer} '  -t TAG                the tag of the image to build'
  ${printer}
  ${printer} 'environment variables:'
  ${printer} '  NAME                  the name of the image to build'
  ${printer} '  SOURCE                the source directory of the image'
  ${printer} '  DOCKER                the location of the docker binary'
}

# usage: main [-h] [-v] [-n] [-t TAG]
main() {
  local print_version=0

  local build_docker=${DOCKER:-${DEFAULT_DOCKER}}
  local build_name=${NAME:-${DEFAULT_NAME}}
  local build_tag=${DEFAULT_TAG}
  local build_source=

  while getopts ':hvnt:' OPT; do
    case ${OPT} in
      h) full_usage; return 0 ;;
      v) print_version=1 ;;
      n) build_docker="print_raw ${build_docker}" ;;
      t) build_tag=${OPTARG} ;;
      ?) error "illegal option: ${OPTARG}"; usage error_raw; return 1 ;;
    esac
  done

  # Print version if needed
  if [[ "${print_version}" = 1 ]]; then
    print_version_info "${build_name}" "${build_tag}"
    return 0
  fi

  # Ensure the source path is valid
  build_source=$(make_absolute "${CURRENT_DIRECTORY}"
                               "${SOURCE:-${DEFAULT_SOURCE}}")

  # Check if any extra arguments were provided
  if [[ $((OPTIND - 1)) != $# ]]; then
    error 'too many arguments'
    usage error_raw
    return 1
  fi

  # Build the image
  safe_execute "${build_docker}" build -t "${build_name}:${build_tag}" \
               "${build_source}"
}

main "$@"
exit $?
