#!/usr/bin/env bash
#
# Run xtensa-lx106-elf container

if [[ "$0" != "${BASH_SOURCE[0]}" ]]; then
  echo "$(basename -- "${BASH_SOURCE[0]}"): error:" \
       'script must not be sourced' >&2
  return 1
fi

readonly SCRIPT_NAME=$(basename -- "${BASH_SOURCE[0]}")
readonly BASE_DIRECTORY=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)
readonly CURRENT_DIRECTORY=$(pwd)

source "${BASE_DIRECTORY}/scripts/config.sh"
source "${BASE_DIRECTORY}/scripts/util.sh"

# usage: usage ["printer"]
usage() {
  ${1:-print_raw} "usage: ${SCRIPT_NAME} [-h] [-v] [-n] [-d DATA_DIRECTORY]" \
                  '[-t TAG] ARGS...'
}

# usage: full_usage ["printer"]
full_usage() {
  local printer=${1:-print_raw}

  usage "${printer}"
  ${printer}
  ${printer} 'Run script for xtensa-lx106-elf development container'
  ${printer}
  ${printer} 'arguments:'
  ${printer} '  -h                    show this help message and exit'
  ${printer} '  -v                    show version information and exit'
  ${printer} '  -n                    don'"'"'t run docker and just print the'
  ${printer} '                        command instead'
  ${printer} '  -d DATA_DIRECTORY     mount point for /mnt/data inside the'
  ${printer} '                        container'
  ${printer} '  -t TAG                the tag of the image to run'
  ${printer} '  ARGS...               the command to run in the container'
  ${printer}
  ${printer} 'environment variables:'
  ${printer} '  NAME                  the name of the container to run'
  ${printer} '  DOCKER                the location of the docker binary'
}

# usage: main [-h] [-v] [-n] [-d DATA_DIRECTORY] [-t TAG] ARGS...
main() {
  local print_version=0

  local run_docker=${DOCKER:-${DEFAULT_DOCKER}}
  local run_name=${NAME:-${DEFAULT_NAME}}
  local run_tag=${DEFAULT_TAG}
  local run_mount=

  while getopts ':hvnd:t:' OPT; do
    case ${OPT} in
      h) full_usage; return 0 ;;
      v) print_version=1 ;;
      n) run_docker="print_raw ${run_docker}" ;;
      d) run_mount=${OPTARG} ;;
      t) run_tag=${OPTARG} ;;
      ?) error "illegal option: ${OPTARG}"; usage error_raw; return 1 ;;
    esac
  done

  # Print version if needed
  if [[ "${print_version}" = 1 ]]; then
    print_version_info "${run_name}" "${run_tag}"
    return 0
  fi

  # Ensure the mount point is valid
  run_mount=$(make_absolute "${CURRENT_DIRECTORY}" "${run_mount}")

  # Check whether or not COMMAND was provided
  if [[ $((OPTIND - 1)) = $# ]]; then
    error 'missing ARGS'
    usage error_raw
    return 1
  fi

  # Remove everything leading up to COMMAND argument
  shift $((OPTIND - 1))

  # Arguments for running docker
  local run_arguments=(--rm --interactive --tty)

  # Add mount point to arguments if needed
  if [[ -n "${run_mount}" ]]; then
    run_arguments+=(-v "${run_mount}:/mnt/data")
  fi

  # Add name and remaining arguments to arguments
  run_arguments+=("${run_name}:${run_tag}" "$@")

  # Run the image
  safe_execute "${run_docker}" run "${run_arguments[@]}"
}

main "$@"
exit $?
